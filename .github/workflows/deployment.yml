name: Docker Image CI
on:
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]
  workflow_dispatch:
jobs:
  
  build-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: start db and test
      run: | 
        docker run -d --name task-postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=password -e POSTGRES_DB=posotgres -p 5432:5432 postgres:15
        sleep 5
        export DATABASE_URL=postgresql://postgres:password@localhost:5432/postgres
        PYTHONPATH=. pytest -v --maxfail=1 --disable-warnings
  build-push:
    runs-on: ubuntu-latest
    needs: build-test  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t 81200/task-tracker:latest .
      
      - name: Push Docker image
        run: |
          docker push 81200/task-tracker:latest
      - name: Login to EC2
        env:
          EC2_IP: ${{ secrets.EC2_PUBLIC_IP }}
          S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          S3_ACCESS_KEY: ${{ secrets.IAM_ACCESS_KEY_ID }} 
          S3_SECRET_KEY: ${{ secrets.IAM_SECRET_ACCESS_KEY }}
        run: |
            # Path to your private key in the repo
            KEY_PATH="pem/my-terraform-key.pem"
            
            # Ensure SSH key exists
            if [[ ! -f "$KEY_PATH" ]]; then
              echo "Error: SSH key not found at $KEY_PATH"
              exit 1
            fi
            
            # --- SSH Key Setup ---
            echo "Setting up SSH key..."
            mkdir -p ~/.ssh
            cp "$KEY_PATH" ~/.ssh/id_rsa
            chmod 400 ~/.ssh/id_rsa
            
            # Disable strict host key checking (avoid CI host verification failure)
            echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
            ## Copy files
            scp -i ~/.ssh/id_rsa yml/*.yml ubuntu@$EC2_IP:/home/ubuntu/deployments/
            ssh -i ~/.ssh/id_rsa ubuntu@$EC2_IP "EC2_IP='${EC2_IP}' bash -s" << 'EOF'
            env | grep EC2 > ip.txt
            cat ip.txt
            sed -i '/# APP_SECRETS_START/,/# APP_SECRETS_END/d' ~/.bashrc
            # Write new block
            {
              echo "# APP_SECRETS_START"
              awk '{print "export " $0}' ip.txt
              echo "# APP_SECRETS_END"
            } >> ~/.bashrc
            # --- Step 4: Ensure .profile sources .bashrc ---
            PROFILE_FILE="$HOME/.profile"
            if ! grep -q 'source ~/.bashrc' "$PROFILE_FILE"; then
              echo -e "\n# Source bashrc for all login sessions\n[ -f ~/.bashrc ] && . ~/.bashrc" >> "$PROFILE_FILE"
            fi
            
            # --- Step 5: Optional: apply immediately for this session ---
            source ~/.bashrc
            
            # --- Step 6: Debug: show last 10 lines of .bashrc and .profile ---
            echo "---- ~/.bashrc ----"
            tail -n 10 ~/.bashrc
            echo "---- ~/.profile ----"
            tail -n 10 ~/.profile
            
            EOF
