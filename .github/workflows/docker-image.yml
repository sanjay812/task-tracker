name: Docker Image CI
on:
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]
  workflow_dispatch:

jobs:
  
  build-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: start db and test
      run: | 
        docker run -d --name task-postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=password -e POSTGRES_DB=posotgres -p 5432:5432 postgres:15
        sleep 5
        export DATABASE_URL=postgresql://postgres:password@localhost:5432/postgres
        PYTHONPATH=. pytest -v --maxfail=1 --disable-warnings
  build-push:
    runs-on: ubuntu-latest
    needs: build-test  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Build and push Docker image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}:v1
          docker build -t $IMAGE .
          docker push $IMAGE
      - name: Setup SSH key
        run: | 
          mkdir -p ~/.ssh
          cp pem/my-terraform-key.pem ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          # Disable strict host key checking to avoid host verification failure in CI
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      - name: Login to EC2
        env:
          EC2_IP: ${{ secrets.EC2_PUBLIC_IP }}
        run: |
            ssh -i ~/.ssh/id_rsa ubuntu@$EC2_IP << 'EOF'
              if ! sudo docker version &> /dev/null
              then
                  echo "Docker not found. Installing..."
                  # Update apt and install prerequisite packages
                  sudo apt-get update -y
                  sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          
                  
          
                  # Add Docker's official GPG key
                  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
                  # Add Docker apt repository
                  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          
                  
          
                  # Update apt again to include Docker repo packages
          
                  sudo apt-get update -y
          
                  
          
                  # Install Docker Engine, CLI, containerd, and Docker Compose plugin
          
                  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
          
            
          
              else
          
                  echo "Docker is already installed."
          
              fi   
          
              # Check Docker Compose 
          
              if ! sudo docker compose version &> /dev/null
          
              then
          
                  echo "Docker Compose not found. Installing..."
          
                  sudo apt-get install docker-compose-plugin -y
          
              else
          
                  echo "Docker Compose is already installed."
          
              fi
          
              
          
              # Start and enable Docker
          
              
          
              echo "Starting Docker..."
          
              sudo systemctl enable docker
          
              sudo systemctl start docker
          
              sudo systemctl status docker --no-pager
          
              echo *** | sudo docker login ghcr.io -u sanjay812 --password-stdin
          
              cd /home/ubuntu/deployments
          
              sudo mkdir -p ./loki-data
          
              sudo chown -R 10001:10001 ./loki-data
        
            EOF

      - name: Print S3 Bucket Name
        run: echo "S3 Bucket:${{ secrets.S3_BUCKET_NAME }}"
